@model Dictionary<WaveAccountingIntegration.Models.Customer, WaveAccountingIntegration.Models.Transaction_History>

@{
	//Layout = null;

	var customerId = Model.Keys.First().id;

	var notices = new List<string>
	{
		"3DayLate",
		"5DayTennantAtWill",
		"15DayNoCause",
		"CourtForms"

	};

	bool? reverseOrder = ViewBag.reverseOrder;

	var runningBalance = reverseOrder == true ? 0 : Model.First().Value.ending_balance;
}

<!DOCTYPE html>

<html>
<head>
	<meta name="viewport" content="width=device-width" />
	<title>EvictionDocs for @ViewBag.customerName</title>
</head>
<body>

	@foreach (var notice in notices)
	{
		@Html.ActionLink(notice, "Ledger", new { id = customerId, form = notice }) @:||
	}

<table class="table">
	<tr>
		<th>
			Ending Balance
		</th>
		<th>
			Name
		</th>
	</tr>

	@foreach (var item in Model)
	{
		<tr>
			<td>
				$@Html.DisplayFor(modelItem => item.Value.ending_balance)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.Key.name)
				<br />
				<br />
				@Html.DisplayFor(modelItem => item.Key.city)
			</td>
		</tr>
	}

</table>

<table>
	@{
		var count = reverseOrder == true ? 1 : Model.Values.First().events.Count();

		var line = 0;

		var orderedList = new List<WaveAccountingIntegration.Models.Event>();

		if (reverseOrder == true)
		{
			orderedList = Model.Values.First().events/*.Where(x => x.total != 0)*/.OrderBy(x => x.date).ThenBy(x => x.event_type).ToList();
		}
		else
		{
			orderedList = Model.Values.First().events/*.Where(x => x.total != 0)*/.OrderByDescending(x => x.date).ThenByDescending(x => x.event_type).ToList();
		}
	}

	@foreach (var item in orderedList)
	{
		if (line++ % 10 == 0)
		{
			<tr>
				<th>
					@(Html.ActionLink("#", "Ledger", new { ViewBag.id, reverseOrder = (reverseOrder == true ? false : true) }))
				</th>
				<th>
					| Event
				</th>
				<th>
					| Amount
				</th>
				<th>
					| Balance
				</th>
				<th>
					| @(Html.ActionLink("Date", "Ledger", new { ViewBag.id, reverseOrder = (reverseOrder == true ? false : true) }))
				</th>
				<th>
					| Rent
				</th>
				<th>
					| Depst
				</th>
				<th>
					| Utils
				</th>
				<th>
					| Late
				</th>
				<th>
					| Pet
				</th>
				<th>
					| Fees
				</th>
				<th>
					| Credit
				</th>
				<th>
					| Court
				</th>
				<th>
					| Order
				</th>
				<th>
					| Paid
				</th>
				<th>
					| Due
				</th>
			</tr>
		}
		<tr>
			<td>
				@(reverseOrder == true ? count++ : count--)
			</td>
			<td>
				| @if (item.event_type != "payment")
				{
					@: <span style="background-color:lightyellow">new month</span>
				}
				else
				{
					if (item.total >= 0)
					{
						@: <span style="background-color:lightgreen">payment</span>
					}
					else
					{
						@: <span style="background-color:lightpink">refund</span>
					}
				}
			</td>
			<td>
				| @if (item.event_type == "payment")
				{
					if (item.total >= 0)
					{
						@: -@Html.DisplayFor(modelItem => item.total)
					}
					else
					{
						@: (@Html.DisplayFor(modelItem => item.total))
					}
				}
				else if (item.event_type != "payment")
				{
					if (item.total >= 0)
					{
						@: +@Html.DisplayFor(modelItem => item.total)
					}
					else
					{
						@*@: -(@Html.DisplayFor(modelItem => item.total))*@
						@: @Html.DisplayFor(modelItem => item.total)
					}
				}
			</td>
			<td>
				|
				@{
					if (reverseOrder == true)
					{
						if (item.event_type != "payment")
						{
							runningBalance += item.total;
						}
						else
						{
							runningBalance -= item.total;
						}
					}

					<span style="background-color:lightcyan"> @runningBalance.ToString("0.##")</span>

					if (reverseOrder == false)
					{
						if (item.event_type != "payment")
						{
							runningBalance -= item.total;
						}
						else
						{
							runningBalance += item.total;
						}
					}
				}
			</td>
			<td>
				| @item.date.Value.ToISODateFormat()
			</td>
			<td>
				| @if (item.event_type != "payment")
				{
					@: @(item.invoice.items.Where(x => x.product.name.ToUpper().Contains("RI")).Sum(x => x.price * x.quantity).ToString("0.##"))
				}
			</td>
			<td>
				| @if (item.event_type != "payment")
				{
					@: @(item.invoice.items.Where(x => x.product.name.ToUpper().Contains("DEPOSIT")).Sum(x => x.price * x.quantity).ToString("0.##"))
				}
			</td>
			<td>
				| @if (item.event_type != "payment")
				{
					@:  @(item.invoice.items.Where(x => x.description.ToUpper().Contains(" 20") || x.description.ToUpper().Contains("delete me when all bill are added".ToUpper())).Sum(x => x.price * x.quantity).ToString("0.##"))
				}
			</td>
			<td>
				| @if (item.event_type != "payment")
				{
					@: @(item.invoice.items.Where(x => x.product.name.ToUpper().Contains("LATE")).Sum(x => x.price * x.quantity).ToString("0.##"))
				}
			</td>
			<td>
				| @if (item.event_type != "payment")
				{
					@: @(item.invoice.items.Where(x => x.description.ToUpper().Contains("PET") && x.product.name.ToUpper().Contains("MISC") || x.product.name.ToUpper().Contains("PET")).Sum(x => x.price * x.quantity).ToString("0.##"))
				}
			</td>
			<td>
				| @if (item.event_type != "payment")
				{
					@:  @(item.invoice.items.Where(x => x.product.name.ToUpper().StartsWith("FEE")).Sum(x => x.price * x.quantity).ToString("0.##"))
				}
			</td>
			<td>
				| @if (item.event_type != "payment")
				{
					@:  @(item.invoice.items.Where(x => x.product.name.ToUpper().Contains("CREDIT") && x.description.ToUpper().Contains("CREDIT FOR")).Sum(x => x.price * x.quantity).ToString("0.##"))
				}
			</td>
			<td>
				| @if (item.event_type != "payment")
				{
					@: @(item.invoice.items.Where(x => x.product.name.ToUpper().Contains("COURT EV")).Sum(x => x.price * x.quantity).ToString("0.##"))
				}
			</td>
			<td>
				| @if (item.event_type != "payment")
				{
					@: @(item.invoice.items.Where(x => (x.product.name.ToUpper().Contains("EV ORDER SERVICE")) || (x.description.ToUpper().Contains("SL SHER") && x.product.name.ToUpper().Contains("MISC"))).Sum(x => x.price * x.quantity).ToString("0.##"))
				}
			<td>
				| @if (item.event_type != "payment")
				{
					if ((item.total - item.invoice.invoice_amount_due) >= 0)
					{
						@: @(item.total - item.invoice.invoice_amount_due)
					}
					else
					{
						@: (@(item.total - item.invoice.invoice_amount_due))
					}
				}
			</td>
			<td>
				| @Html.DisplayFor(modelItem => item.invoice.invoice_amount_due)
			</td>
		</tr>
	}

</table>

<table class="table">
	<tr>
		<th>
			Ending Balance
		</th>
		<th>
			Name
		</th>
	</tr>

	@foreach (var item in Model)
	{
		<tr>
			<td>
				$@Html.DisplayFor(modelItem => item.Value.ending_balance)
			</td>
			<td>
				@Html.DisplayFor(modelItem => item.Key.name)
				<br />
				<br />
				@Html.DisplayFor(modelItem => item.Key.city)
			</td>
		</tr>
	}

</table>

</body>
</html>
